\input texinfo

@ifnottex
@paragraphindent 0
@end ifnottex

We implement the MultilayerPerceptron project:

@itemize
@item
The program developed in C++ language of C++17 standard
@item
The program code located in the src folder
@item
When writing code we follow the Google style
@item
Classes implemented within the s21 namespace
@item
Prepare full coverage of modules related to calculations with unit-tests using the GTest library
@item
The program built with Makefile which contains standard set of targets for GNU-programs: all, install, uninstall, clean, dvi, dist, tests. Installation directory arbitrary, except the building one
@item
GUI implementation, based on any GUI library with API for C++17: Qt.
@item
The program implemented using the MVC pattern, and also:
@itemize
@item
there no business code in the view code
@item
there no interface code in the controller and the model
@item
controllers thin
@end itemize

@item
The program provide the ability to form and train neural network models to classify handwritten Latin letters
@item
The perceptron:

@itemize
@item
classify images with handwritten letters of the Latin alphabet
@item
have from 2 to 5 hidden layers
@item
use a sigmoid activation function for each hidden layer
@item
be able to learn on an open dataset (e.g. EMNIST-letters presented in the datasets directory)
@item
show accuracy on a test sample over 70 percent
@item
be trained using the backpropagation method
@end itemize

@item
Implement the perceptron in two ways:
@itemize
@item
in matrix form (all layers are represented as weight matrices)
@item
in graph form (each neuron is represented as some node object connected to other nodes by refs)
@end itemize

@item
The input data normalize (by size and color) before neural network execution, in order to match the format of the emnist sample;
@item
The interface of the program ability to:

@itemize
@item
run the experiment on the test sample or on a part of it, given by a floating point number between 0 and 1 (where 0 is the empty sample - the degenerate situation, and 1 is the whole test sample). After the experiment an average accuracy, precision, recall, f-measure and total time spent on the experiment displayed on the screen
@item
load BMP images (image size can be up to 512x512) with Latin letters and classify them
@item
draw two-color square images by hand in a separate window
@item
start the real-time training process for a user-defined number of epochs with displaying the error control values for each training epoch. Make a report as a graph of the error change calculated on the test sample for each training epoch
@item
run the training process using cross-validation for a given number of groups k
@item
switch perceptron implementation (matrix or graph)
@item
switch the number of perceptron hidden layers (from 2 to 5)
@item
save to a file and load weights of perceptron from a file
@end itemize
@end itemize

@bye